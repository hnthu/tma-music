buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
        classpath ("com.moowork.gradle:gradle-node-plugin:1.1.1")
    }
}
group 'tmamusic'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin:"com.moowork.node"
apply plugin: 'org.springframework.boot'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '1.5.9.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '1.5.9.RELEASE'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.13.Final'
    compile group: 'org.springframework', name: 'spring-orm', version: '5.0.4.RELEASE'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.8-dmr'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.springframework', name: 'spring-messaging', version: '5.0.5.RELEASE'

}
node {
    version = "6.11.3"
    download = true
    nodeModulesDir = file("TMAMusic-master")
}

task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run','buildDev']
}

task buildClient(type:NpmTask, dependsOn:'npmInstall') {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run','build']
}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run','buildWatch']
}
bootRun.dependsOn(buildClientDev)
jar.dependsOn(buildClient)
